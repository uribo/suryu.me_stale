<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>suryu.me</title>
    <link>/categories/r/index.xml</link>
    <description>Recent content on suryu.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>tidyverse脳になって階層構造のあるデータフレームを使いこなそう</title>
      <link>/post/r_advent_calendar_day3/</link>
      <pubDate>Tue, 06 Dec 2016 08:45:00 +0000</pubDate>
      
      <guid>/post/r_advent_calendar_day3/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;span class=&#34;citation&#34;&gt;@yutannihilationが書いた&lt;/span&gt;&lt;strong&gt;tidyverse&lt;/strong&gt;の&lt;a href=&#34;http://notchained.hatenablog.com/entry/tidyverse&#34;&gt;記事&lt;/a&gt;を眠気眼の状態で読んでしまって、眠気も吹き飛んで3時起きしました。訴訟。&lt;/p&gt;
&lt;p&gt;さて、Rアドベントカレンダーの中で &lt;span class=&#34;citation&#34;&gt;@yutannihilation&lt;/span&gt; や &lt;span class=&#34;citation&#34;&gt;@takeshi0406&lt;/span&gt; が&lt;strong&gt;tidyverse&lt;/strong&gt;についての記事を&lt;a href=&#34;http://kiito.hatenablog.com/entry/2016/12/04/195835&#34;&gt;続けて書いている&lt;/a&gt;ことからも、&lt;strong&gt;tidyverse&lt;/strong&gt;の普及具合がわかる昨今ですが、これらの記事の中であまり言及されていないことがあります。それはtidyverseに含まれるパッケージの一つである&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;や&lt;strong&gt;&lt;code&gt;{tidyr}&lt;/code&gt;&lt;/strong&gt;が提供する&lt;strong&gt;nested data frame&lt;/strong&gt;です。私個人はこれを&lt;strong&gt;階層構造のあるデータフレーム&lt;/strong&gt;と呼んでいます。&lt;/p&gt;
&lt;p&gt;一人Rアドベントカレンダーの3日目では、tidyverseに欠かせない思想である、この階層構造のあるデータフレームについて説明をしたいと思います。といっても春先に書いたこの記事の再放送的な感じでもあります。&lt;/p&gt;
&lt;p&gt;参考) &lt;a href=&#34;http://uribo.hatenablog.com/entry/2016/03/27/070000&#34; class=&#34;uri&#34;&gt;http://uribo.hatenablog.com/entry/2016/03/27/070000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rにはデータフレームとリストというオブジェクトがあるのはみなさんご存知の通りです。データフレームは特に利用機会の多いオブジェクトで、csvやexcelから読み込んだオブジェクトはデータフレームに変換されます。統計処理やモデリングを実行する関数の多くがデータフレームの変数を対象としており、&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;もデータフレームの操作を前提としています。その特徴は、列をなす変数と行を構成する表構造をとることでしょう。そのためデータフレームでは、1列目は3つの要素、2列目は4つの要素…といった&lt;strong&gt;サイズの異なるデータを扱えません&lt;/strong&gt;。加えて列を構成するのはベクトルオブジェクトであるため、異なる種類のオブジェクトを一つの列の中で扱うことはできません。対して&lt;strong&gt;リストオブジェクトはデータフレームと比べると自由度の高いデータ格納形式&lt;/strong&gt;です。リストには、ベクトルやデータフレーム、行列、さらにはリストまで、Rのオブジェクトを含めることができます。一方でその自由度の高さから、やや扱いに困ることがあります。データフレームと比べるとやはり操作性が悪いです。これらの&lt;strong&gt;データフレーム、リストのそれぞれの特徴を備えたのが階層構造のあるデータフレーム&lt;/strong&gt;となります。その特徴を見ていきましょう。&lt;/p&gt;
&lt;p&gt;階層構造のあるデータフレームでは、変数にリストやデータフレームを含めることが可能です。データフレームの中にデータフレーム、データフレームの中にリスト、このことがnestedの由縁です。具体的にどういうことかというのを&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;と&lt;strong&gt;&lt;code&gt;{tidyr}&lt;/code&gt;&lt;/strong&gt;を使って示します。またデータの例として&lt;strong&gt;&lt;code&gt;{gapminder}&lt;/code&gt;&lt;/strong&gt;パッケージの世界各国の出生時平均余命に関するデータセットを利用します。まずはパッケージを読み込み、&lt;strong&gt;gapminder&lt;/strong&gt;データセットの大きさを確認しておきましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(gapminder)

dim(gapminder)
## [1] 1704    6
head(gapminder)
## # A tibble: 6 × 6
##       country continent  year lifeExp      pop gdpPercap
##        &amp;lt;fctr&amp;gt;    &amp;lt;fctr&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Afghanistan      Asia  1952  28.801  8425333  779.4453
## 2 Afghanistan      Asia  1957  30.332  9240934  820.8530
## 3 Afghanistan      Asia  1962  31.997 10267083  853.1007
## 4 Afghanistan      Asia  1967  34.020 11537966  836.1971
## 5 Afghanistan      Asia  1972  36.088 13079460  739.9811
## 6 Afghanistan      Asia  1977  38.438 14880372  786.1134&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1704行、結構大きなデータサイズですね。一方でこのデータセットは国ごとの5年ごとの人口、出生時平均余命について記録したデータであるので、国 countryをキーとして入れ子にすることが可能です。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gapminder %&amp;gt;% count(continent, country)
## Source: local data frame [142 x 3]
## Groups: continent [?]
## 
##    continent                  country     n
##       &amp;lt;fctr&amp;gt;                   &amp;lt;fctr&amp;gt; &amp;lt;int&amp;gt;
## 1     Africa                  Algeria    12
## 2     Africa                   Angola    12
## 3     Africa                    Benin    12
## 4     Africa                 Botswana    12
## 5     Africa             Burkina Faso    12
## 6     Africa                  Burundi    12
## 7     Africa                 Cameroon    12
## 8     Africa Central African Republic    12
## 9     Africa                     Chad    12
## 10    Africa                  Comoros    12
## # ... with 132 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nest_by_country &amp;lt;- gapminder %&amp;gt;% 
  group_by(country) %&amp;gt;% 
  nest()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;階層構造のあるデータフレームを作る方法はいくつかあるのですが、上記のように&lt;code&gt;dplyr::group_by()&lt;/code&gt;によるグループ化を行ったのち、&lt;code&gt;tidyr::nest()&lt;/code&gt;を使うのが最も簡単です。あるいは、&lt;code&gt;gapminder %&amp;gt;% tidyr::nest(-country)&lt;/code&gt;で直接グループネストを作っても良いかもしれません。&lt;/p&gt;
&lt;p&gt;さて、上記で作成した&lt;strong&gt;nest_by_country&lt;/strong&gt;というオブジェクトを出力すると次の結果が得られます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nest_by_country
## # A tibble: 142 × 2
##        country               data
##         &amp;lt;fctr&amp;gt;             &amp;lt;list&amp;gt;
## 1  Afghanistan &amp;lt;tibble [12 × 5]&amp;gt;
## 2      Albania &amp;lt;tibble [12 × 5]&amp;gt;
## 3      Algeria &amp;lt;tibble [12 × 5]&amp;gt;
## 4       Angola &amp;lt;tibble [12 × 5]&amp;gt;
## 5    Argentina &amp;lt;tibble [12 × 5]&amp;gt;
## 6    Australia &amp;lt;tibble [12 × 5]&amp;gt;
## 7      Austria &amp;lt;tibble [12 × 5]&amp;gt;
## 8      Bahrain &amp;lt;tibble [12 × 5]&amp;gt;
## 9   Bangladesh &amp;lt;tibble [12 × 5]&amp;gt;
## 10     Belgium &amp;lt;tibble [12 × 5]&amp;gt;
## # ... with 132 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;countryというのはグループ化に用いたキーですが、dataというのは何を示しているのでしょう。また、どうしてデータサイズが変わっているのでしょうか。これこそが階層構造のあるデータフレームの特徴となります。&lt;/p&gt;
&lt;p&gt;nest_by_countryオブジェクト自体はデータフレームなので、変数の値を参照することができます。試しにdata変数の第一要素を参照してみましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nest_by_country$data[[1]]
## # A tibble: 12 × 5
##    continent  year lifeExp      pop gdpPercap
##       &amp;lt;fctr&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
## 1       Asia  1952  28.801  8425333  779.4453
## 2       Asia  1957  30.332  9240934  820.8530
## 3       Asia  1962  31.997 10267083  853.1007
## 4       Asia  1967  34.020 11537966  836.1971
## 5       Asia  1972  36.088 13079460  739.9811
## 6       Asia  1977  38.438 14880372  786.1134
## 7       Asia  1982  39.854 12881816  978.0114
## 8       Asia  1987  40.822 13867957  852.3959
## 9       Asia  1992  41.674 16317921  649.3414
## 10      Asia  1997  41.763 22227415  635.3414
## 11      Asia  2002  42.129 25268405  726.7341
## 12      Asia  2007  43.828 31889923  974.5803&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;元のgapminderデータが持っていたデータに近い値が出力されました。この値は実は、&lt;code&gt;nest_by_country$country[1]&lt;/code&gt;のAfghanistanに含まれるデータを抽出したものとなっています。それは&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;の次のコードを実行することで確認できます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nest_by_country$country[1]
## [1] Afghanistan
## 142 Levels: Afghanistan Albania Algeria Angola Argentina ... Zimbabwe

identical(nest_by_country$data[[1]],
          gapminder %&amp;gt;% filter(country == &amp;quot;Afghanistan&amp;quot;) %&amp;gt;% 
  select(-country))
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;つまり階層構造のあるデータフレームとは、データフレームに含まれる任意の変数をキーとし、そのキーに含まれる値を別のオブジェクトとし、キーと紐づいた変数に格納することを示しているのです。&lt;/p&gt;
&lt;p&gt;多くのデータは、1つ以上のキーあるいはカテゴリ変数をもっています。そしてこれらのキーに応じて、キーに含まれる項目の数を集計したり、キーごとに処理を行ったり、統計モデリングを適用したりといったことが頻繁に行われます。これらの出力形式はさまざまですが、キーを基準としている以上、処理結果をキーと紐づけることが可能です。ですが、格納形式が厳密なデータフレームではそれができません。そのため、階層構造のあるデータフレームはリストのようにデータフレームの中にさらにオブジェクトを含めることを可能としています。これにより、元のデータ（キー）と処理結果を簡単に紐付け、再びデータフレームとして操作することができます。&lt;/p&gt;
&lt;p&gt;また上記で、入れ子にされるオブジェクトを別のオブジェクトと書きましたが、これは先のようにデータフレームでなく、リストや統計解析のためのオブジェクトであってもネスト可能であることを示しています。今度は&lt;code&gt;dplyr::do()&lt;/code&gt;を用いて線形回帰を行ってみましょう。&lt;code&gt;dplyr::do()&lt;/code&gt;はグループに対し共通の処理を施すのに適しています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(do_by_country &amp;lt;- gapminder %&amp;gt;% 
  group_by(country) %&amp;gt;% 
  do(data = lm(lifeExp ~ year, data = .)))
## Source: local data frame [142 x 2]
## Groups: &amp;lt;by row&amp;gt;
## 
## # A tibble: 142 × 2
##        country     data
## *       &amp;lt;fctr&amp;gt;   &amp;lt;list&amp;gt;
## 1  Afghanistan &amp;lt;S3: lm&amp;gt;
## 2      Albania &amp;lt;S3: lm&amp;gt;
## 3      Algeria &amp;lt;S3: lm&amp;gt;
## 4       Angola &amp;lt;S3: lm&amp;gt;
## 5    Argentina &amp;lt;S3: lm&amp;gt;
## 6    Australia &amp;lt;S3: lm&amp;gt;
## 7      Austria &amp;lt;S3: lm&amp;gt;
## 8      Bahrain &amp;lt;S3: lm&amp;gt;
## 9   Bangladesh &amp;lt;S3: lm&amp;gt;
## 10     Belgium &amp;lt;S3: lm&amp;gt;
## # ... with 132 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;countryごとに&lt;code&gt;lm()&lt;/code&gt;を適用した結果が格納されました。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all.equal(
  do_by_country$data[[1]],
  gapminder %&amp;gt;% filter(country == &amp;quot;Afghanistan&amp;quot;) %&amp;gt;% 
  select(-country) %&amp;gt;% 
  lm(lifeExp ~ year, data = .)
)
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;入れ子構造を解除するにはどうするのでしょうか。ご心配なく。&lt;strong&gt;&lt;code&gt;{tidyr}&lt;/code&gt;&lt;/strong&gt;には&lt;code&gt;nest()&lt;/code&gt;と対をなす&lt;code&gt;unnest()&lt;/code&gt;という関数が用意されています。しかしそれには入れ子となっているオブジェクトがデータフレームである必要があります。なので先の線形回帰の結果を&lt;strong&gt;&lt;code&gt;{broom}&lt;/code&gt;&lt;/strong&gt;パッケージの&lt;code&gt;tidy()&lt;/code&gt;によりデータフレームとして扱えるようにしてから入れ子構造を解除します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{broom}&lt;/code&gt;&lt;/strong&gt;パッケージは、Rの統計解析の関数の出力結果を扱いやすいデータフレームへと整形してくれる便利なパッケージです。例えば&lt;code&gt;lm()&lt;/code&gt;の結果に対し&lt;code&gt;broom::tidy()&lt;/code&gt;を実行すると切片や係数、p値などをデータフレーム形式で取得できます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;do_by_country &amp;lt;- gapminder %&amp;gt;% 
  group_by(country) %&amp;gt;% 
  do(data = lm(lifeExp ~ year, data = .) %&amp;gt;% broom::tidy()) %&amp;gt;% 
  tidyr::unnest()

do_by_country %&amp;gt;% colnames()
## [1] &amp;quot;country&amp;quot;   &amp;quot;term&amp;quot;      &amp;quot;estimate&amp;quot;  &amp;quot;std.error&amp;quot; &amp;quot;statistic&amp;quot; &amp;quot;p.value&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;データフレームなので、&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;の関数を使って特定の国の結果のみを取り出すことができます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;do_by_country %&amp;gt;% filter(country == &amp;quot;Afghanistan&amp;quot;)
## # A tibble: 2 × 6
##       country        term     estimate   std.error statistic
##        &amp;lt;fctr&amp;gt;       &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Afghanistan (Intercept) -507.5342716 40.48416195 -12.53661
## 2 Afghanistan        year    0.2753287  0.02045093  13.46289
## # ... with 1 more variables: p.value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;しかし、全ての入れ子がデータフレームにできるわけではありません。そのような時には&lt;strong&gt;&lt;code&gt;{purrr}&lt;/code&gt;&lt;/strong&gt;による関数型プログラミングによるデータ操作が効果を発揮します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;by_country &amp;lt;- nest_by_country %&amp;gt;% 
  dplyr::mutate(model = purrr::map(data, ~ lm(lifeExp ~ year, data = .)))

by_country %&amp;gt;% unnest(model %&amp;gt;% purrr::map(broom::tidy))
## # A tibble: 284 × 6
##        country        term      estimate    std.error  statistic
##         &amp;lt;fctr&amp;gt;       &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1  Afghanistan (Intercept)  -507.5342716 40.484161954 -12.536613
## 2  Afghanistan        year     0.2753287  0.020450934  13.462890
## 3      Albania (Intercept)  -594.0725110 65.655359062  -9.048348
## 4      Albania        year     0.3346832  0.033166387  10.091036
## 5      Algeria (Intercept) -1067.8590396 43.802200843 -24.379118
## 6      Algeria        year     0.5692797  0.022127070  25.727749
## 7       Angola (Intercept)  -376.5047531 46.583370599  -8.082385
## 8       Angola        year     0.2093399  0.023532003   8.895964
## 9    Argentina (Intercept)  -389.6063445  9.677729641 -40.258031
## 10   Argentina        year     0.2317084  0.004888791  47.395847
## # ... with 274 more rows, and 1 more variables: p.value &amp;lt;dbl&amp;gt;
by_country %&amp;gt;% unnest(model %&amp;gt;% purrr::map(broom::augment))
## # A tibble: 1,704 × 10
##        country lifeExp  year  .fitted   .se.fit      .resid       .hat
##         &amp;lt;fctr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1  Afghanistan  28.801  1952 29.90729 0.6639995 -1.10629487 0.29487179
## 2  Afghanistan  30.332  1957 31.28394 0.5799442 -0.95193823 0.22494172
## 3  Afghanistan  31.997  1962 32.66058 0.5026799 -0.66358159 0.16899767
## 4  Afghanistan  34.020  1967 34.03722 0.4358337 -0.01722494 0.12703963
## 5  Afghanistan  36.088  1972 35.41387 0.3848726  0.67413170 0.09906760
## 6  Afghanistan  38.438  1977 36.79051 0.3566719  1.64748834 0.08508159
## 7  Afghanistan  39.854  1982 38.16716 0.3566719  1.68684499 0.08508159
## 8  Afghanistan  40.822  1987 39.54380 0.3848726  1.27820163 0.09906760
## 9  Afghanistan  41.674  1992 40.92044 0.4358337  0.75355828 0.12703963
## 10 Afghanistan  41.763  1997 42.29709 0.5026799 -0.53408508 0.16899767
## # ... with 1,694 more rows, and 3 more variables: .sigma &amp;lt;dbl&amp;gt;,
## #   .cooksd &amp;lt;dbl&amp;gt;, .std.resid &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あるいは次のように&lt;code&gt;split()&lt;/code&gt;でグループを分割し、各グループに対して&lt;code&gt;lm() %&amp;gt;% broom::tidy()&lt;/code&gt;を適用するのも一つの方法です。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map_by_country &amp;lt;- gapminder %&amp;gt;% 
  split(.$country) %&amp;gt;% 
  purrr::map(., ~ lm(lifeExp ~ year, data = .) %&amp;gt;% broom::tidy())

map_by_country$Afghanistan
##          term     estimate   std.error statistic          p.value
## 1 (Intercept) -507.5342716 40.48416195 -12.53661 0.00000019340553
## 2        year    0.2753287  0.02045093  13.46289 0.00000009835213&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回紹介したパッケージは、データセットを提供した&lt;strong&gt;&lt;code&gt;{gapminder}&lt;/code&gt;&lt;/strong&gt;をのぞいて、&lt;strong&gt;&lt;code&gt;{tidyverse}&lt;/code&gt;&lt;/strong&gt;に含まれているものです。すごい設計思想ですね。俺たちのtidyverseはこれからだ！&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>configパッケージで楽々環境変数の管理</title>
      <link>/post/r_advent_calendar_day2/</link>
      <pubDate>Mon, 05 Dec 2016 22:30:00 +0000</pubDate>
      
      <guid>/post/r_advent_calendar_day2/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;みなさん、Rの環境変数についてどのように管理されていますか？&lt;code&gt;.Rprofile&lt;/code&gt;ですか？それも良い方法です。ただ、Rprojectによるプロジェクト単位での分析作業がメインとなっている昨今では、プロジェクトごとに環境変数を設定したり、プロジェクトで頻繁に利用する値を環境変数としたい場合などがあると思います。そのような時に、今回紹介する&lt;strong&gt;&lt;code&gt;{config}&lt;/code&gt;&lt;/strong&gt;が役立ちます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{config}&lt;/code&gt;&lt;/strong&gt;を一言で説明すると、&lt;strong&gt;作業スペース規模で利用可能な環境変数の呼び出し&lt;/strong&gt;です。作業スペースというのは、Rでは&lt;code&gt;getwd()&lt;/code&gt;で得られるディレクトリであり、&lt;code&gt;.Rproj&lt;/code&gt;ファイルのあるディレクトリです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{config}&lt;/code&gt;&lt;/strong&gt;を利用するには&lt;code&gt;config.yml&lt;/code&gt;というYAMLファイルを用意する必要があります。この&lt;code&gt;config.yml&lt;/code&gt;に環境変数を記述することで、&lt;strong&gt;&lt;code&gt;{config}&lt;/code&gt;&lt;/strong&gt;が環境変数を呼び出せる状態になります。また&lt;strong&gt;&lt;code&gt;{config}&lt;/code&gt;&lt;/strong&gt;が優れている点は、環境に応じて呼び出す環境変数の値を変更できるという点です。例えば、通常の利用と開発用に同じ名称の変数をそれぞれ用意していたとします。今回はdefault、devの2つの環境を想定したファイルを用意しました。&lt;/p&gt;
&lt;pre class=&#34;yaml&#34;&gt;&lt;code&gt;default: 
    var: hoge

dev:
    var: piyo&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;config.yml&lt;/code&gt;のあるディレクトリで&lt;code&gt;config::get()&lt;/code&gt;を実行すると&lt;code&gt;config.yml&lt;/code&gt;にある設定がRオブジェクトとして読み込まれます。この時、読み込まれるのはdefaultに指定した変数です。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# config.ymlに書かれた項目をconfigというオブジェクトに保存します
(config &amp;lt;- config::get())
# $var
# [1] &amp;quot;hoge&amp;quot;
# 
# attr(,&amp;quot;config&amp;quot;)
# [1] &amp;quot;default&amp;quot;
# attr(,&amp;quot;file&amp;quot;)
# [1] &amp;quot;/Users/uri/git/25days-shiny/config.yml&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特定の変数を取り出したい時には次のように変数名を参照・指定して実行します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;config$var
# [1] &amp;quot;hoge&amp;quot;

config::get(&amp;quot;var&amp;quot;)
# [1] &amp;quot;hoge&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;defaultではなく、devの環境変数を扱いたい場合にはどうすれば良いでしょうか。これは&lt;code&gt;Sys.setenv(R_CONFIG_ACTIVE = )&lt;/code&gt;で対象の環境設定の名称を指定して実行することで変更されます。すなわち、defaultの環境設定からdevに切り替えるには次のコードを実行します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Sys.setenv(R_CONFIG_ACTIVE = &amp;quot;dev&amp;quot;)
config::get(&amp;quot;var&amp;quot;)
# [1] &amp;quot;piyo&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また作業ディレクトリとは異なるディレクトリにある&lt;code&gt;config.yml&lt;/code&gt;を参照したい時には&lt;code&gt;config::get(file = )&lt;/code&gt;でパスを指定します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{config}&lt;/code&gt;&lt;/strong&gt;は、データベースのパスワードやAPIのトークン、パッケージ開発時など、さまざまな場面で役立つ便利なパッケージですので、ぜひ導入されるこをお薦めします。&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>extrafont ggplot2で日本語ラベル (ver. 2.2.0 向け)</title>
      <link>/post/visualization_advent_calendar_day2/</link>
      <pubDate>Sun, 04 Dec 2016 09:00:00 +0000</pubDate>
      
      <guid>/post/visualization_advent_calendar_day2/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;一人visualizationの2日目（2つめの記事です。アドベントカレンダーとはなんだったのか…）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt;でタイトルや軸名に日本語を扱いたい場合、いくつか方法があると思うのですが、私は普段次のコードを実行していました。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(magrittr)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;quartzFonts(YuGo = quartzFont(rep(&amp;quot;YuGo-Medium&amp;quot;, 4)))
theme_set(theme_classic(base_size = 12, base_family = &amp;quot;YuGo&amp;quot;))

iris %&amp;gt;% ggplot(aes(Sepal.Length, Petal.Width)) +
  geom_point() +
  xlab(&amp;quot;萼片長&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基本的にはこれで日本語を組み込んだggplot2の図が描けるのですが、最近これだと&lt;strong&gt;&lt;code&gt;{bookdown}&lt;/code&gt;&lt;/strong&gt;によるPDF生成時にうまく表示されないという問題に直面しました。どうしたものかと悩んだ時に出てきたのが&lt;strong&gt;&lt;code&gt;{extrafont}&lt;/code&gt;&lt;/strong&gt;で、これを使うと無事に問題が解決したのでメモを残しておきます。ちなみにタイトルにあるように&lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt;のバージョンは現行の2.2.0です。&lt;/p&gt;
&lt;div id=&#34;extrafont&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;extrafontを使用する準備&lt;/h2&gt;
&lt;p&gt;まずパッケージがないと始まらないのでインストールします。&lt;strong&gt;&lt;code&gt;{extrafont}&lt;/code&gt;&lt;/strong&gt;をインストールすると、フォント管理用に&lt;strong&gt;&lt;code&gt;{extrafontdb}&lt;/code&gt;&lt;/strong&gt;というパッケージもインストールされます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;extrafont&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;パッケージを読み込みます。&lt;strong&gt;&lt;code&gt;{extrafont}&lt;/code&gt;&lt;/strong&gt;を初めて使う際やフォントを追加した場合には&lt;code&gt;font_import()&lt;/code&gt;を実行してフォントを登録します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(extrafont)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Registering fonts with R&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# font_import()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{extrafont}&lt;/code&gt;&lt;/strong&gt;はRで標準的に利用可能なPostScriptのフォントに対してTrueTypeフォントを利用可能にするパッケージで、これを使うことで多様なフォントをグラフに埋め込むことができます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fonts()&lt;/code&gt;を実行して登録済み（利用可能な）フォント名を確認してみましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myfonts &amp;lt;- fonts()
myfonts %&amp;gt;% length()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 104&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;myfonts %&amp;gt;% sample(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Tw Cen MT&amp;quot;   &amp;quot;MS PGothic&amp;quot;  &amp;quot;Consolas&amp;quot;    &amp;quot;Batang&amp;quot;      &amp;quot;DejaVu Sans&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;グラフの各要素に対し、フォントを設定するには次のような使い分けを行います&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;family&lt;/em&gt;引数に使いたいフォント名を与える。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt;の&lt;code&gt;geom_*()&lt;/code&gt;で&lt;em&gt;family&lt;/em&gt;引数があればこっちで指定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;タイトルや軸のラベルには&lt;code&gt;theme(... = element_text(base_family = ))&lt;/code&gt;で指定しておく&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
loadfonts(quiet = TRUE)

library(ggrepel)
mtcars$label &amp;lt;- rownames(mtcars)
mtcars$label[1:15] &amp;lt;- &amp;quot;&amp;quot;

p &amp;lt;- ggplot(mtcars,
  aes(wt, mpg, label = label, colour = factor(cyl))) +
  geom_point()

p +  
  geom_text(aes(wt, mpg, colour = factor(cyl)),
              label = &amp;quot;\uf1b9&amp;quot;,
              family = &amp;quot;FontAwesome&amp;quot;,
              size = 4) +
  geom_text_repel(data = mtcars, aes(wt, mpg, label = label, family = &amp;quot;xkcd&amp;quot;)) +
  xlab(&amp;quot;重量&amp;quot;) +
  ylab(&amp;quot;マイル / ガロン&amp;quot;) +
  theme(text = element_text(size = 16, family = &amp;quot;IPAexMincho&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで冒頭の矛盾系AAのような図を作れます。&lt;strong&gt;&lt;code&gt;{bookdown}&lt;/code&gt;&lt;/strong&gt;に埋め込む図もこれでOK&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows?知らん &lt;code&gt;skip_on_os(&amp;quot;windows)&amp;quot;&lt;/code&gt;&lt;/strong&gt;（環境がないので試せていない）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/miiton@github/items/1e50ab643653b7a58954&#34;&gt;Rでpdfに好きな日本語フォントを使用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://notchained.hatenablog.com/entry/2015/06/02/235436&#34;&gt;ggplot2でFont Awesomeのアイコンを使ってプロット&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kenpg2.seesaa.net/article/414814562.html&#34;&gt;R + extrafont パッケージで数式を PDF に埋め込む : 研究に使うポスグレ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Rで方位記号を描く (ggsn版)</title>
      <link>/post/rgis_advent_calendar_day2/</link>
      <pubDate>Sat, 03 Dec 2016 07:00:00 +0000</pubDate>
      
      <guid>/post/rgis_advent_calendar_day2/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;読んでいるブログの中でこんな記事を見ました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://garageit.blog.so-net.ne.jp/2016-12-01&#34;&gt;Rで方位記号を描く&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この記事では&lt;strong&gt;&lt;code&gt;{prettymapr}&lt;/code&gt;&lt;/strong&gt;というパッケージが使われているのですが、ちょうど最近 &lt;strong&gt;&lt;code&gt;{ggsn}&lt;/code&gt;&lt;/strong&gt;というパッケージを発見し、このパッケージでも 方位記号が書けるので紹介したいと思います。&lt;/p&gt;
&lt;div id=&#34;ggsn-ggplo2ggmap&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;ggsn: ggplo2、ggmapベースの図に方位記号・縮尺を追加する&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://suryu.me/post/rgis_advent_calendar_day1/&#34;&gt;先日も紹介した&lt;/a&gt;行政区域境界を含めた国内の地図を描画する&lt;strong&gt;&lt;code&gt;{jpndistrict}&lt;/code&gt;&lt;/strong&gt;を使った例を示します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 北海道のデータを取得します
d1 &amp;lt;- spdf_jpn_pref(1, district = FALSE)

# 一旦地図を作成します。
p &amp;lt;- gg_jpn_district(d1, ghost = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方位記号を追加する関数は&lt;code&gt;north()&lt;/code&gt;および&lt;code&gt;north2()&lt;/code&gt;です。出力位置の細かな調整を行いたい祭は&lt;code&gt;north2()&lt;/code&gt;の方が簡単な気がします。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;north2(p, x = 0.65, y = 0.9, scale = 0.12, symbol = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このとき方位記号の種類を引数&lt;em&gt;symbol&lt;/em&gt;で変更できます。これらの方位記号はQGISで使われているものなのだとか。&lt;/p&gt;
&lt;p&gt;では次に縮尺を追加します。&lt;code&gt;scalebar()&lt;/code&gt;を加えます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 神奈川県の行政区域データを取得します
d14 &amp;lt;- spdf_jpn_pref(14)
d14.fortify &amp;lt;- fortify(d14)

ggplot() + 
  geom_polygon(data = d14.fortify, 
               aes(x = long, y = lat, group = group), fill = &amp;#39;#d0d0d0&amp;#39;) + 
  geom_map(data = d14, map = d14.fortify, 
           aes(group = group, map_id = id),
           color = &amp;quot;black&amp;quot;, fill = &amp;quot;white&amp;quot;) +
  ggthemes::theme_map() + 
  coord_equal() + 
  scalebar(data = d14.fortify, dist = 5, dd2km = TRUE, model = &amp;quot;WGS84&amp;quot;, location = &amp;quot;bottomleft&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../img/161203-pref14map-scalebar.png&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;というわけで&lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt;ベースの地図で方位記号を加えたい・出力位置の調整をしたいときに便利そうです。（コードの説明がきちんとできていない…）&lt;/p&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>一人Shinyアドベントカレンダー概要</title>
      <link>/post/shiny_advent_calendar_day1/</link>
      <pubDate>Thu, 01 Dec 2016 21:00:00 +0000</pubDate>
      
      <guid>/post/shiny_advent_calendar_day1/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;div id=&#34;shiny&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shinyとは&lt;/h2&gt;
&lt;p&gt;Shiny &lt;a href=&#34;https://shiny.rstudio.com&#34; class=&#34;uri&#34;&gt;https://shiny.rstudio.com&lt;/a&gt;とは、RStudioを中心にオープンソースで開発が行われているRのウェブアプリケーションフレームワークです。RubyでいうところのRuby on Rails、Pythonでいうところのdjangoのような立ち位置です。Shinyは、Rの高機能な集計処理やグラフ描画システムをウェブで動作させるための最適なツールとなります。ウェブアプリケーションなのですが、特徴として、HTMLやCSS、JavaScriptに関する知識は必要とせず、Rの関数としてアプリケーションを構築できるという点があります。&lt;/p&gt;
&lt;p&gt;Shinyの公式ページに豊富なデモアプリケーションがありますので、実際にどのようなものができるのかを知りたい方はまずそちらを見ると良いでしょう。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;shiny&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;一人Shinyアドベントカレンダー日程&lt;/h2&gt;
&lt;p&gt;25日間でShinyについての知識を深め、Shinyアプリケーションを構築できるようになることを目指します。&lt;/p&gt;
&lt;p&gt;以下の日程は変更することがあります。&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;一人Shinyアドベントカレンダー概要&lt;/li&gt;
&lt;li&gt;はじめてのShiny&lt;/li&gt;
&lt;li&gt;Shinyを構成する要素: input, output&lt;/li&gt;
&lt;li&gt;Shinyを構成する要素: server, ui&lt;/li&gt;
&lt;li&gt;Shinyを構成する要素: render&lt;/li&gt;
&lt;li&gt;Shinyを構成する要素: wigets&lt;/li&gt;
&lt;li&gt;reactiveを理解する&lt;/li&gt;
&lt;li&gt;observeを理解する&lt;/li&gt;
&lt;li&gt;htmlwidgets: 概要&lt;/li&gt;
&lt;li&gt;htmlwidgets: DT&lt;/li&gt;
&lt;li&gt;htmlwidgets: leaflet&lt;/li&gt;
&lt;li&gt;データのインポート、ダウンロード&lt;/li&gt;
&lt;li&gt;URLをパラメータに含める&lt;/li&gt;
&lt;li&gt;bookmark&lt;/li&gt;
&lt;li&gt;shinydashboard&lt;/li&gt;
&lt;li&gt;module&lt;/li&gt;
&lt;li&gt;Shiny Server&lt;/li&gt;
&lt;li&gt;Shiny Serverでアプリを公開する: nginxの設定&lt;/li&gt;
&lt;li&gt;Shiny Gadgets&lt;/li&gt;
&lt;li&gt;プログレスバーを作る&lt;/li&gt;
&lt;li&gt;Shiny 拡張パッケージ&lt;/li&gt;
&lt;li&gt;Shiny + CSS + JS&lt;/li&gt;
&lt;li&gt;Shinyあるある問題&lt;/li&gt;
&lt;li&gt;データベースとの連携&lt;/li&gt;
&lt;li&gt;????&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;各記事は&lt;strong&gt;&lt;code&gt;{bookdown}&lt;/code&gt;&lt;/strong&gt;を使った&lt;a href=&#34;https://uribo.github.io/25days-shiny/&#34;&gt;こちらのページ&lt;/a&gt;で公開することを予定しています。&lt;/p&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>jpndistrict: 日本の行政区域地図を容易に描画するパッケージ</title>
      <link>/post/rgis_advent_calendar_day1/</link>
      <pubDate>Thu, 01 Dec 2016 08:00:00 +0000</pubDate>
      
      <guid>/post/rgis_advent_calendar_day1/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;一人R + GISアドベントカレンダーの1日目です。初日は自作パッケージの話をします。&lt;/p&gt;
&lt;p&gt;現在、タイトルにあるように日本の行政区域地図を容易に描画するための&lt;strong&gt;&lt;code&gt;{jpndistrict}&lt;/code&gt;&lt;/strong&gt;というパッケージを&lt;a href=&#34;https://github.com/uribo/jpndistrict&#34;&gt;開発中&lt;/a&gt;です。このパッケージの基本的な使い方について紹介します。&lt;/p&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;開発の動機&lt;/h2&gt;
&lt;p&gt;市区町村境界ある都道府県の地図を描きたい、特定の市区町村を選んで、例えば3つの町だけの地図を描きたい。いや、3つもいらない。A町だけで良い。こんなことが、よくあります。&lt;/p&gt;
&lt;p&gt;地図を描画するにはShapefileを用いますが、これを自作するのは困難なので、誰か（主に行政や企業）が作ったものを使うことになります。ですが次に問題となるのが、どのShapefileを使うのが良いのか、ということだったりします。色々な団体がShapefileを配布してくれるのはありがたいのですが、選択肢が多いのです。また、たくさんShapefileをダウンロードしてハードディスクの容量を圧迫するのもできれば避けたいところです。&lt;/p&gt;
&lt;p&gt;また、こういったShapefileのほとんどは都道府県単位であるのがほとんどです。なので、最初の要望の2, 3番目を実行するには加工が必要になります。これをするにはGISの知識がやや必要で、自分のようなニワカには難しいところがあります。&lt;/p&gt;
&lt;p&gt;… そこで&lt;strong&gt;&lt;code&gt;{jpndistrict}&lt;/code&gt;&lt;/strong&gt; ですよ！！！！&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;何ができるのか&lt;/h2&gt;
&lt;p&gt;上記の問題。都道府県、市区町村の地図を描画するのに…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;どのShapefileを使うのが良いのか混乱する&lt;/li&gt;
&lt;li&gt;Shapefileを保存したくない&lt;/li&gt;
&lt;li&gt;市区町村の描画を簡単に行いたい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を解決するために&lt;strong&gt;&lt;code&gt;{jpndistrict}&lt;/code&gt;&lt;/strong&gt;は次の働きをします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;国土数値情報からダウンロード可能な「行政区域データ &lt;a href=&#34;http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03.html&#34; class=&#34;uri&#34;&gt;http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03.html&lt;/a&gt;」を利用する&lt;/li&gt;
&lt;li&gt;パッケージ用データとしてShapefileをRオブジェクトにしたものを用意&lt;/li&gt;
&lt;li&gt;市区町村名、市区町村コードから特定の市区町村を抽出可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下にこれらを実際に試してみます。&lt;/p&gt;
&lt;p&gt;なお、&lt;strong&gt;&lt;code&gt;{jpndistrict}&lt;/code&gt;&lt;/strong&gt;が提供する地図データは国土交通省国土政策局「国土数値情報」の提供データ (行政区域データ 平成27年4月1日時点のデータ &lt;a href=&#34;http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03.html&#34; class=&#34;uri&#34;&gt;http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03.html&lt;/a&gt;)を元に瓜生真也が編集・加工を行ったものです。そのため、このデータを利用した二次著作物を作成する際は、国土数値情報の利用約款に準拠するものとします。利用時にはこの点にご注意ください。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;デモ&lt;/h2&gt;
&lt;p&gt;11月はCRANへのsubmitに制限がかかってしまったため、GitHubからインストールする必要があります。今月中にCRANへの登録を目指しています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;githubinstall&amp;quot;)
githubinstall::gh_install_packages(&amp;quot;jpndistrict&amp;quot;, ref = &amp;quot;add_light_rds&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# パッケージの読み込み
library(jpndistrict)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;section level4&#34;&gt;
&lt;h4&gt;行政区域データの取得&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;spdf_jpn_pref()&lt;/code&gt;… 県レベル。都道府県コードあるいは都道府県名でSpatialPolygonsDataFrameを返します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.pref33 &amp;lt;- spdf_jpn_pref(code = 33)
class(df.pref33)

# [1] &amp;quot;SpatialPolygonsDataFrame&amp;quot;
# attr(,&amp;quot;package&amp;quot;)

head(df.pref33)

# class       : SpatialPolygonsDataFrame 
# features    : 6 
# extent      : 133.7397, 134.1227, 34.55947, 34.94909  (xmin, xmax, ymin, ymax)
# coord. ref. : +proj=longlat +ellps=GRS80 +no_defs 
# variables   : 5
# # A tibble: 6 × 5
#   pref_name city_name_ city_name city_name_full city_code
# *     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;fctr&amp;gt;
# 1    岡山県     岡山市      北区    岡山市 北区     33101
# 2    岡山県     岡山市      中区    岡山市 中区     33102
# 3    岡山県     岡山市      東区    岡山市 東区     33103
# 4    岡山県     岡山市      東区    岡山市 東区     33103
# 5    岡山県     岡山市      東区    岡山市 東区     33103
# 6    岡山県     岡山市      東区    岡山市 東区     33103

# spdf_jpn_pref(admin_name = &amp;quot;岡山県&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{jpndistrict}&lt;/code&gt;&lt;/strong&gt;では、取得した地図データを&lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt;ベースの図として出力する関数 (&lt;code&gt;gg_jpn_district()&lt;/code&gt;)を提供します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spdf_jpn_pref(code = 33) %&amp;gt;% 
  gg_jpn_district()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../img/161201_plot_pref33_district_true.png&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spdf_jpn_pref()&lt;/code&gt;の引数として&lt;em&gt;district&lt;/em&gt;を用意しています。これは都道府県内の市区町村境界区分を行うかのオプションで、FALSEの場合、境界区分のない都道府県データを返します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spdf_jpn_pref(admin_name = &amp;quot;岡山県&amp;quot;, district = FALSE) %&amp;gt;% 
  gg_jpn_district()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../img/161201_plot_pref33_district_false.png&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spdf_jpn_cities()&lt;/code&gt;… 都道府県に含まれる特定の市区町村データを取得します。ここでは市区町村名や市区町村コードの指定が可能です。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spdf_jpn_cities(jis_code_pref = 33, jis_code_city = c(&amp;quot;33101&amp;quot;, &amp;quot;33212&amp;quot;))

# class       : SpatialPolygonsDataFrame 
# features    : 10 
# extent      : 133.7397, 134.2735, 34.58832, 34.94909  (xmin, xmax, ymin, ymax)
# coord. ref. : +proj=longlat +ellps=GRS80 +no_defs 
# variables   : 5
# # A tibble: 10 × 5
#    pref_name city_name_ city_name city_name_full city_code
# *      &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;fctr&amp;gt;
# 1     岡山県     岡山市      北区    岡山市 北区     33101
# 2     岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212
# 3     岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212
# 4     岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212
# 5     岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212
# 6     岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212
# 7     岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212
# 8     岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212
# 9     岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212
# 10    岡山県       &amp;lt;NA&amp;gt;  瀬戸内市       瀬戸内市     33212

spdf_jpn_cities(jis_code_pref = 14, admin_name = &amp;quot;海老名市&amp;quot;)
# class       : SpatialPolygonsDataFrame 
# features    : 1 
# extent      : 139.3692, 139.4366, 35.39991, 35.47739  (xmin, xmax, ymin, ymax)
# coord. ref. : +proj=longlat +ellps=GRS80 +no_defs 
# variables   : 5
# # A tibble: 1 × 5
#   pref_name city_name_ city_name city_name_full city_code
# *     &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;    &amp;lt;fctr&amp;gt;
# 1  神奈川県       &amp;lt;NA&amp;gt;  海老名市       海老名市     14215&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;spdf_jpn_cities(jis_code_pref = 33, admin_name = &amp;quot;岡山市&amp;quot;) %&amp;gt;% 
  gg_jpn_district()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../../img/161201_plot_pref33_city.png&#34; style=&#34;display: block; margin: auto;&#34;&gt;&lt;/p&gt;
&lt;p&gt;我ながら、便利だなと思います。何か問題や使い方で不明な点があればGitHubやTwitterでおしらせください。&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>plotly流行れ</title>
      <link>/post/visualization_advent_calendar_day1/</link>
      <pubDate>Thu, 01 Dec 2016 01:00:00 +0000</pubDate>
      
      <guid>/post/visualization_advent_calendar_day1/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;plotly &lt;a href=&#34;https://plot.ly/&#34; class=&#34;uri&#34;&gt;https://plot.ly/&lt;/a&gt; をご存知でしょうか。plotlyはカナダのモントリオールにある企業なのですが、活動の一つに、データの可視化のためのJavaSctiptライブラリである Plotly.js の開発があります。Plotly.jsはオープンソースで提供されており、このPlotly.jsのラッパーがR, Python, Matlabといった環境のために用意されています。&lt;/p&gt;
&lt;div id=&#34;plotly&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;plotlyでできること&lt;/h2&gt;
&lt;p&gt;plotlyでどのようなグラフが作成できるかは、&lt;a href=&#34;https://plot.ly/r/&#34;&gt;本家&lt;/a&gt;を見てもらえば、たくさんの種類があることがわかると思います。&lt;strong&gt;&lt;code&gt;{plotly}&lt;/code&gt;&lt;/strong&gt;の文法は&lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt;と似ている点がありますが、これはこれで独特な書き方をします。plotlyで作図可能なグラフの種類を簡単に取り上げてみます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;これらのグラフをRで作成する方法や、plotlyを使った細かな機能・技術に関しては、このアドカレの中で紹介予定です。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本
&lt;ul&gt;
&lt;li&gt;散布図、バブルチャート&lt;/li&gt;
&lt;li&gt;折れ線グラフ、時系列グラフ&lt;/li&gt;
&lt;li&gt;棒グラフ、円グラフ&lt;/li&gt;
&lt;li&gt;ヒストグラム&lt;/li&gt;
&lt;li&gt;箱ひげ図&lt;/li&gt;
&lt;li&gt;ヒートマップ&lt;/li&gt;
&lt;li&gt;ネットワーク図&lt;/li&gt;
&lt;li&gt;等高線図&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;応用
&lt;ul&gt;
&lt;li&gt;地図&lt;/li&gt;
&lt;li&gt;立体図&lt;/li&gt;
&lt;li&gt;ダッシュボード&lt;/li&gt;
&lt;li&gt;ガントチャート&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;plotly&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;plotlyを選ぶ理由&lt;/h2&gt;
&lt;p&gt;plotlyはまだ開発途中のライブラリです。ですがその将来は明るく、現段階でも十分な実用性を備えていると思います。というのも、Rを使ったデータ分析環境を提供する&lt;a href=&#34;https://exploratory.io&#34;&gt;exploratory&lt;/a&gt;でもグラフ作成の機能にplotlyが採用されているからです。また、&lt;strong&gt;Shinyのようなサーバーが必要なインタクティブグラフと比べて、plotlyは静的なウェブページにもインタラクティブな操作を追加できます&lt;/strong&gt;。グラフを作っておいて、利用者の側で見たいデータのみを表示させたり、逆に不要なデータを削除することができます。これは同様の画像描画ライブラリのhighchartsでも実現可能なのですが、&lt;strong&gt;Rとの親和性やライセンスの面からもplotlyに軍配が上がる&lt;/strong&gt;のではないでしょうか。というわけで、plotlyがもっと流行ると良いなと思うのでした。&lt;/p&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Rで3億円宣言</title>
      <link>/post/r_advent_calendar_day1/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/r_advent_calendar_day1/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;初日なのでエモい話をしたいと思います。Rのコードは出てきません。完全にポエムです。明日からが一人Rアドベントカレンダーの本番だと思ってもらっても構いません。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;私は今年3月から大学院をリタイアし、ｼｬｶｲｼﾞﾝとして働き出しました。&lt;/p&gt;
&lt;p&gt;それから今日まで私が稼いできたお金は、自分自身のRを使った技術により稼いだものだと思っています。というのも私のｷﾞｮｰﾑ内容のほとんどはRを使った仕事だからです。なので給与はRで稼いだお金とほぼ等しいものとして考えます。&lt;/p&gt;
&lt;p&gt;タイトルにある「Rで3億円宣言」というのは、&lt;strong&gt;うまくいけば生涯で稼ぐであろう3億円を、Rによって稼いでやろう、Rの仕事を死ぬまで続けよう、R使いが増えるための環境構築や知見共有を行おう、という3つの宣言&lt;/strong&gt;です（ただし&lt;a href=&#34;https://github.com/tidyverse/tidyverse/blob/master/vignettes/manifesto.Rmd&#34;&gt;某マニフェスト&lt;/a&gt;のように、変わることもある、とここに書いておきます）。3億円まではまだまだ遠いけど、3億円に向けて今年大きな一歩を踏み出しました。月に向かうような話かもしれませんが、確実に歩み始めたのです。&lt;/p&gt;
&lt;div id=&#34;3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;マニフェスト実現のための3ヵ条&lt;/h2&gt;
&lt;p&gt;マニフェストを実現するために、何をするべきでしょうか。雑に考えてみました。&lt;/p&gt;
&lt;div id=&#34;r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1 Rを使える環境で働く&lt;/h3&gt;
&lt;p&gt;これは大事なことです。入社した会社はRを使える私を歓迎してくれました。Twitterでも同様の意見を得ましたが、ｼｬｶｲというのは結果が出せれば手段は問わない傾向にあるようです。Rを使ってデータベース操作、集計、データ分析に加え、そのほかｷﾞｮｰﾑを実行することに対して、何の問題もありませんでした。またShinyによるウェブアプリケーション開発も容認してくれ、&lt;strong&gt;私のRに関する技術や知識はより実用的で幅広いものとなりました&lt;/strong&gt;。できればこのような良い環境を維持したいと思います。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2 Rについての情報を収集する・発信する&lt;/h3&gt;
&lt;p&gt;ニンジャにカラテが必要なように、Rユーザーも日々訓練が必要です。特にHadley Wickhamをはじめとしたタツジン級の開発者がRに関わるようになり、パッケージを含めた環境変化のスピードが速い近年では、すぐに技術は古くなってしまう気がしています。&lt;/p&gt;
&lt;p&gt;小さな変更はすぐに追えますが、大きな変更や新しい技術を取得するのは難しいです。なので小さくコツコツ覚えていくのが良いでしょう。そのためには毎日Rと向き合い、情報を収集するのがてっとり早いと思います。また、情報は頭の中では成熟しませんので、コードを書くことが大事です。せっかく書いたのであれば、ブログやQiitaに記事を公開すると良いでしょう。副業が舞い込んでくるかもしれません（私自身はネットでの活動をきっかけにマイナビでの記事や本を書くことになりました）。&lt;/p&gt;
&lt;p&gt;先日のJapan.Rでも、情報を発信する（生きている宣言をする）ことの大切さが語られました。私の場合、今年はブログを書く機会が去年までと比べて減ってしまったのですが、毎日Rには触れていましたし、GitHubでストーキングも続けていました。&lt;strong&gt;死んでいるように見えても、先端技術について把握している自信があります&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3 Rを好きであり続ける&lt;/h3&gt;
&lt;p&gt;もっとも大事な項目かもしれません。実を言うとRをここまで好きになったのはここ数年の出来事です。大学生時代は、植物を追いかけ、森に入っていたので、Rはここまで熱中できるものではありませんでした。将来についてもわかりません。上記2つの項目が実現できなくなって、Rに対する興味が薄れてしまうことも考えられます。ただ未来は不確実であることは確かです。もしそうなったらRのことは綺麗に忘れたいと思います。むしろ歓迎すべき事象だと受け入れるできです。&lt;strong&gt;Rに飽きたということは多分、次に興味をもてる何かを見つけたということなのですから&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;一人Rアドベントカレンダーについて&lt;/h2&gt;
&lt;p&gt;今年、Rに触れ合う機会が豊富にあったにも関わらず、インターネットを介したアウトプットの少なさを反省して、&lt;strong&gt;働き始めてから得たRやShinyの技術の整理として、Rに関するアドベントカレンダーを書くことにしました&lt;/strong&gt;。内容を考えていると、それが一つ二つでなく、多数あることに気がついたので、一人アドベントカレンダーをやろうと思いました。さらに、私の書きたい内容は次の5つに区分できることがわかったので、5種類の一人Rアドベントカレンダーを書きます。&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;一人Rアドベントカレンダー&lt;/strong&gt;… Rに関する全般的な話題、パッケージの紹介などを予定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一人Shinyアドベントカレンダー&lt;/strong&gt;… RのウェブアプリケーションフレームワークであるShinyに関するtipsや基本的な解説記事を予定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一人Rパッケージ開発アドベントカレンダー&lt;/strong&gt;… Rのパッケージ作成に関する体験や話題を取り上げます&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一人visualizationアドベントカレンダー&lt;/strong&gt;… &lt;strong&gt;&lt;code&gt;{ggplot2}&lt;/code&gt;&lt;/strong&gt;や&lt;strong&gt;&lt;code&gt;{plotly}&lt;/code&gt;&lt;/strong&gt;といった可視化用パッケージに関する内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一人R + GISアドベントカレンダー&lt;/strong&gt;… ガチGISではなく、ゆるふわな感じでお送りします&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正直毎日5つ書ける気はしないし、誰も完走することを期待していないでしょう。でもこれを書くのは自分のためです。他にも進捗を出すべき事案があるので、そちらを優先します。ほどほどにできたらなと思います。&lt;/p&gt;
&lt;p&gt;余談ですが、この記事は&lt;a href=&#34;http://n3331.com&#34;&gt;両側を中央線が走る、線路の真ん中に位置するカフェ&lt;/a&gt;で、R界の神に近づきつつある、awesome ユタニーこと &lt;a href=&#34;https://twitter.com/yutannihilation&#34;&gt;yutannihilation&lt;/a&gt; を前にして書かれました。私のポエットなマニフェストとともに、進捗に付き合ってくれた彼に感謝の気持ちをここに表し、&lt;strong&gt;3億円を稼いだあかつきには彼に寿司を献上することを誓います&lt;/strong&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Rで3億円宣言&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Rを使った仕事で稼ぐ&lt;/li&gt;
&lt;li&gt;Rを使った仕事を継続させる&lt;/li&gt;
&lt;li&gt;Rで稼ぐための環境を作っていく&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2016年12月1日&lt;/p&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>【予告】Rに関する一人アドベントカレンダー2016</title>
      <link>/post/r_advent_calendar_2016/</link>
      <pubDate>Tue, 29 Nov 2016 05:20:00 +0000</pubDate>
      
      <guid>/post/r_advent_calendar_2016/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;明後日から12月になる。12月といえば最近はもっぱら「アドベントカレンダー」の月という認識がある。今年はRに関するアドベントカレンダーが2つQiitaに上がっていて、そっちも盛り上がりを見せている。が、俺は一人でRアドベントカレンダーをやる。&lt;em&gt;5つくらいやる&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;と、これだけ大口を叩いておいて、ネタのストックが豊富にあるのかというとそんなことはない。頭にはいくつかあるが文章やコードになっているものは皆無だ。25日完走できる気はしない。でもやらないと0日しかないので、1日でも多く書けるようにしたい。(完走できたら寿司でも肉でもケーキでもご馳走してくれ！！！)&lt;/p&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;やろうとしているもの&lt;/h2&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;R一般 (パッケージ、データ操作、小ネタ)&lt;/li&gt;
&lt;li&gt;Shiny&lt;/li&gt;
&lt;li&gt;visualization (ggplot2, plotly, …)&lt;/li&gt;
&lt;li&gt;R + GIS&lt;/li&gt;
&lt;li&gt;Rパッケージ開発&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;どこでやるか&lt;/h2&gt;
&lt;p&gt;たぶんここ。あるいはQiita。Shinyアプリであればデモが必要なのでどっかのサーバーあるいはshinyapp.ioにするかも。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;進捗どうですか&lt;/h2&gt;
&lt;p&gt;にゃおす&lt;/p&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/post/hello-world/</link>
      <pubDate>Fri, 10 Jun 2016 06:30:00 +0000</pubDate>
      
      <guid>/post/hello-world/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(remoji)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これまで「はてなブログ」でちまちまと駄文を&lt;a href=&#34;http://uribo.hatenablog.com&#34;&gt;書き連ねていた&lt;/a&gt;わけだけど、ふと思い立ってこちらに引っ越すことにした。このサイトはR Markdownの&lt;a href=&#34;http://rmarkdown.rstudio.com/rmarkdown_websites.html&#34;&gt;ウェブサイト構築機能&lt;/a&gt;を使って作られている。その特徴としてページを作成する際のもとになっているのはR Markdownファイルとなっている。&lt;/p&gt;
&lt;p&gt;何ヶ月か前からブログを移行する気持ちがあって着々と準備を進めていたのだけど公開までに時間がかかった。というのも、他の進捗がイマイチだったこともあってなんだか遊びっぽいことに注力してしまうのはアレな感じがあったからだ。といいつつ結局進捗よりもこちらが先になってしまった。それは反省。&lt;/p&gt;
&lt;div id=&#34;r-markdown-websites&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;✏️ はてなブログからR Markdown Websitesへ&lt;/h2&gt;
&lt;p&gt;引越しの理由について書いておきたい。はてなブログの良さはあるのだけど、次にあげるような理由があったので引っ越し先を検討していた。要約すると&lt;span class=&#34;hlt_bf&#34;&gt;「Rは最高！」というのを伝えるのに最適な環境を用意したかった&lt;/span&gt;のだ。&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Rmdからmarkdownを生成してコピー＆ペーストでページを作成するのが面倒。（はてなAPIを使ってラッパーパッケージでも作れば良かったのかもしれないが）&lt;/li&gt;
&lt;li&gt;htmlwidgetsを埋め込めない（はてなブログでは画像で対応していた）&lt;/li&gt;
&lt;li&gt;公開する資料やコードが増えてきた&lt;/li&gt;
&lt;li&gt;海外Rブロガーを見ていると独自ドメインでやっている人をちょいちょい見かけるのでそういう人たちへの憧れ&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;私自身が、Rを好きになってRに慣れていけた理由として、Rでもこんなことができる！という驚きによるものだったので、このウェブサイトによってRの魅力を伝えやすくなっているのではないかと期待する。&lt;/p&gt;
&lt;p&gt;きっちりとしたブログサービスのはてなブログから移行した代わりに失ったものもいろいろあると思うが、まあ自由にやっていけるのは気楽な気がしているので今は良い。&lt;/p&gt;
&lt;div id=&#34;r-markdown-websites&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;👍 R Markdown Websitesの良いところ&lt;/h3&gt;
&lt;p&gt;R Markdown Websitesを使えば、Rmdを元にウェブサイトの構築が簡単に行える。それはそれで別に記事を書きたいので簡単に述べておくと、サイトの構造を&lt;code&gt;_site.yml&lt;/code&gt;および&lt;code&gt;_navbar.yml&lt;/code&gt;に書いておき、Rmd形式でページを書いた後に次のコードを実行するだけでhtmlファイルが生成される。R Markdownを使ったウェブサイト構築の特徴ともいえるのだが、このサイトでもページとしてのURLに階層性はほとんどなく、ほぼすべてのページがトップディレクトリ直下に置かれている。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# ディレクトリ全体のRmdファイルを対象にレンダー
rmarkdown::render_site()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もちろん、個々のRmdをレンダーしても良くって、その際はいつものRStudioのKnitボタンを押せば良い。&lt;/p&gt;
&lt;p&gt;個人的には下記のようにhtmlwidgetsをそのまま表示できるのがとても嬉しい 😄。 &lt;strong&gt;&lt;code&gt;{leaflet}&lt;/code&gt;&lt;/strong&gt;や &lt;strong&gt;&lt;code&gt;{highcharter}&lt;/code&gt;&lt;/strong&gt;だって表示させることができる。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(leaflet)
leaflet(width = 600, height = 400) %&amp;gt;% addTiles() %&amp;gt;% 
  setView(lng = 135.0, lat = 38.0, zoom = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;htmlwidget-1eafd2efdc6cb805adc5&#34; style=&#34;width:600px;height:400px;&#34; class=&#34;leaflet html-widget&#34;&gt;&lt;/div&gt;
&lt;script type=&#34;application/json&#34; data-for=&#34;htmlwidget-1eafd2efdc6cb805adc5&#34;&gt;{&#34;x&#34;:{&#34;options&#34;:{&#34;crs&#34;:{&#34;crsClass&#34;:&#34;L.CRS.EPSG3857&#34;,&#34;code&#34;:null,&#34;proj4def&#34;:null,&#34;projectedBounds&#34;:null,&#34;options&#34;:{}}},&#34;calls&#34;:[{&#34;method&#34;:&#34;addTiles&#34;,&#34;args&#34;:[&#34;http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#34;,null,null,{&#34;minZoom&#34;:0,&#34;maxZoom&#34;:18,&#34;maxNativeZoom&#34;:null,&#34;tileSize&#34;:256,&#34;subdomains&#34;:&#34;abc&#34;,&#34;errorTileUrl&#34;:&#34;&#34;,&#34;tms&#34;:false,&#34;continuousWorld&#34;:false,&#34;noWrap&#34;:false,&#34;zoomOffset&#34;:0,&#34;zoomReverse&#34;:false,&#34;opacity&#34;:1,&#34;zIndex&#34;:null,&#34;unloadInvisibleTiles&#34;:null,&#34;updateWhenIdle&#34;:null,&#34;detectRetina&#34;:false,&#34;reuseTiles&#34;:false,&#34;attribution&#34;:&#34;&amp;copy; &lt;a href=\&#34;http://openstreetmap.org\&#34;&gt;OpenStreetMap\u003c/a&gt; contributors, &lt;a href=\&#34;http://creativecommons.org/licenses/by-sa/2.0/\&#34;&gt;CC-BY-SA\u003c/a&gt;&#34;}]}],&#34;setView&#34;:[[38,135],3,[]]},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]}&lt;/script&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(highcharter)
data(&amp;quot;favorite_bars&amp;quot;)
data(&amp;quot;favorite_pies&amp;quot;)

hc &amp;lt;- highchart() %&amp;gt;% 
  hc_chart(type = &amp;quot;column&amp;quot;, inverted = TRUE) %&amp;gt;% 
  hc_title(text = &amp;quot;A highcharter chart&amp;quot;) %&amp;gt;% 
  hc_xAxis(categories = 2012:2016) %&amp;gt;% 
  hc_yAxis(opposite = TRUE, showFirstLabel = FALSE,
           showLastLabel = FALSE) %&amp;gt;% 
  hc_add_series(data = c(3900,  4200,  5700,  8500, 11900),
                name = &amp;quot;Downloads&amp;quot;,
                inverted = FALSE) %&amp;gt;% 
  hc_legend(layout = &amp;quot;vertical&amp;quot;)

hc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section level2&#34;&gt;
&lt;h2&gt;🏡 一人暮らしの方&lt;/h2&gt;
&lt;p&gt;そして、ついでというか無関係な話題になるけど、現実世界の自分も住まいを変えた。今はトーキョーで大学生時代以来の一人暮らしをしている。というかその前段階として働くようになった。&lt;/p&gt;
&lt;p&gt;５月の頭に引越しをしたので、一人暮らしを始めて一ヶ月が経った。最初は冷蔵庫も洗濯機も物干し竿もなくてアレだったけど、今は随分と生活に必要なものが揃ってきた。 部屋にはパソコンと椅子、本くらいしか持ってくるものがなくて、ベッドやらは新調した。少しずつものを増やして&lt;del&gt;いきたい&lt;/del&gt;毎週のようにAmazonから何かが届いていたが、だいぶ落ち着いてきた気がする。&lt;/p&gt;
&lt;p&gt;６月に入り、2016年も折り返し地点に来ようとしている。進捗は…なわけだけど、ここで気持ちを整理した（気がする）。最近は特にアウトプットの機会が減ってきているような気がしているので、進捗を含めて努力していきたい。&lt;/p&gt;
&lt;p&gt;Enjoy :)&lt;/p&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD

&lt;script src=&#34;#####../content/post/hello-world_files/htmlwidgets-0.8/htmlwidgets.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;#####../content/post/hello-world_files/jquery-1.12.4/jquery.min.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;#####../content/post/hello-world_files/leaflet-0.7.7/leaflet.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;#####../content/post/hello-world_files/leaflet-0.7.7/leaflet.js&#34;&gt;&lt;/script&gt;
&lt;link href=&#34;#####../content/post/hello-world_files/leafletfix-1.0.0/leafletfix.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;link href=&#34;#####../content/post/hello-world_files/leaflet-label-0.2.2/leaflet.label.css&#34; rel=&#34;stylesheet&#34; /&gt;
&lt;script src=&#34;#####../content/post/hello-world_files/leaflet-label-0.2.2/leaflet.label.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;#####../content/post/hello-world_files/Proj4Leaflet-0.7.2/proj4-compressed.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;#####../content/post/hello-world_files/Proj4Leaflet-0.7.2/proj4leaflet.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;#####../content/post/hello-world_files/leaflet-binding-1.0.2.9006/leaflet.js&#34;&gt;&lt;/script&gt;





/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>