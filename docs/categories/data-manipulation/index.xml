<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>suryu.me</title>
    <link>/categories/data-manipulation/index.xml</link>
    <description>Recent content on suryu.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="/categories/data-manipulation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>tidyverse脳になって階層構造のあるデータフレームを使いこなそう</title>
      <link>/post/r_advent_calendar_day3/</link>
      <pubDate>Tue, 06 Dec 2016 08:45:00 +0000</pubDate>
      
      <guid>/post/r_advent_calendar_day3/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;p&gt;&lt;span class=&#34;citation&#34;&gt;@yutannihilationが書いた&lt;/span&gt;&lt;strong&gt;tidyverse&lt;/strong&gt;の&lt;a href=&#34;http://notchained.hatenablog.com/entry/tidyverse&#34;&gt;記事&lt;/a&gt;を眠気眼の状態で読んでしまって、眠気も吹き飛んで3時起きしました。訴訟。&lt;/p&gt;
&lt;p&gt;さて、Rアドベントカレンダーの中で &lt;span class=&#34;citation&#34;&gt;@yutannihilation&lt;/span&gt; や &lt;span class=&#34;citation&#34;&gt;@takeshi0406&lt;/span&gt; が&lt;strong&gt;tidyverse&lt;/strong&gt;についての記事を&lt;a href=&#34;http://kiito.hatenablog.com/entry/2016/12/04/195835&#34;&gt;続けて書いている&lt;/a&gt;ことからも、&lt;strong&gt;tidyverse&lt;/strong&gt;の普及具合がわかる昨今ですが、これらの記事の中であまり言及されていないことがあります。それはtidyverseに含まれるパッケージの一つである&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;や&lt;strong&gt;&lt;code&gt;{tidyr}&lt;/code&gt;&lt;/strong&gt;が提供する&lt;strong&gt;nested data frame&lt;/strong&gt;です。私個人はこれを&lt;strong&gt;階層構造のあるデータフレーム&lt;/strong&gt;と呼んでいます。&lt;/p&gt;
&lt;p&gt;一人Rアドベントカレンダーの3日目では、tidyverseに欠かせない思想である、この階層構造のあるデータフレームについて説明をしたいと思います。といっても春先に書いたこの記事の再放送的な感じでもあります。&lt;/p&gt;
&lt;p&gt;参考) &lt;a href=&#34;http://uribo.hatenablog.com/entry/2016/03/27/070000&#34; class=&#34;uri&#34;&gt;http://uribo.hatenablog.com/entry/2016/03/27/070000&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rにはデータフレームとリストというオブジェクトがあるのはみなさんご存知の通りです。データフレームは特に利用機会の多いオブジェクトで、csvやexcelから読み込んだオブジェクトはデータフレームに変換されます。統計処理やモデリングを実行する関数の多くがデータフレームの変数を対象としており、&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;もデータフレームの操作を前提としています。その特徴は、列をなす変数と行を構成する表構造をとることでしょう。そのためデータフレームでは、1列目は3つの要素、2列目は4つの要素…といった&lt;strong&gt;サイズの異なるデータを扱えません&lt;/strong&gt;。加えて列を構成するのはベクトルオブジェクトであるため、異なる種類のオブジェクトを一つの列の中で扱うことはできません。対して&lt;strong&gt;リストオブジェクトはデータフレームと比べると自由度の高いデータ格納形式&lt;/strong&gt;です。リストには、ベクトルやデータフレーム、行列、さらにはリストまで、Rのオブジェクトを含めることができます。一方でその自由度の高さから、やや扱いに困ることがあります。データフレームと比べるとやはり操作性が悪いです。これらの&lt;strong&gt;データフレーム、リストのそれぞれの特徴を備えたのが階層構造のあるデータフレーム&lt;/strong&gt;となります。その特徴を見ていきましょう。&lt;/p&gt;
&lt;p&gt;階層構造のあるデータフレームでは、変数にリストやデータフレームを含めることが可能です。データフレームの中にデータフレーム、データフレームの中にリスト、このことがnestedの由縁です。具体的にどういうことかというのを&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;と&lt;strong&gt;&lt;code&gt;{tidyr}&lt;/code&gt;&lt;/strong&gt;を使って示します。またデータの例として&lt;strong&gt;&lt;code&gt;{gapminder}&lt;/code&gt;&lt;/strong&gt;パッケージの世界各国の出生時平均余命に関するデータセットを利用します。まずはパッケージを読み込み、&lt;strong&gt;gapminder&lt;/strong&gt;データセットの大きさを確認しておきましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(gapminder)

dim(gapminder)
## [1] 1704    6
head(gapminder)
## # A tibble: 6 × 6
##       country continent  year lifeExp      pop gdpPercap
##        &amp;lt;fctr&amp;gt;    &amp;lt;fctr&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Afghanistan      Asia  1952  28.801  8425333  779.4453
## 2 Afghanistan      Asia  1957  30.332  9240934  820.8530
## 3 Afghanistan      Asia  1962  31.997 10267083  853.1007
## 4 Afghanistan      Asia  1967  34.020 11537966  836.1971
## 5 Afghanistan      Asia  1972  36.088 13079460  739.9811
## 6 Afghanistan      Asia  1977  38.438 14880372  786.1134&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1704行、結構大きなデータサイズですね。一方でこのデータセットは国ごとの5年ごとの人口、出生時平均余命について記録したデータであるので、国 countryをキーとして入れ子にすることが可能です。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;gapminder %&amp;gt;% count(continent, country)
## Source: local data frame [142 x 3]
## Groups: continent [?]
## 
##    continent                  country     n
##       &amp;lt;fctr&amp;gt;                   &amp;lt;fctr&amp;gt; &amp;lt;int&amp;gt;
## 1     Africa                  Algeria    12
## 2     Africa                   Angola    12
## 3     Africa                    Benin    12
## 4     Africa                 Botswana    12
## 5     Africa             Burkina Faso    12
## 6     Africa                  Burundi    12
## 7     Africa                 Cameroon    12
## 8     Africa Central African Republic    12
## 9     Africa                     Chad    12
## 10    Africa                  Comoros    12
## # ... with 132 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nest_by_country &amp;lt;- gapminder %&amp;gt;% 
  group_by(country) %&amp;gt;% 
  nest()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;階層構造のあるデータフレームを作る方法はいくつかあるのですが、上記のように&lt;code&gt;dplyr::group_by()&lt;/code&gt;によるグループ化を行ったのち、&lt;code&gt;tidyr::nest()&lt;/code&gt;を使うのが最も簡単です。あるいは、&lt;code&gt;gapminder %&amp;gt;% tidyr::nest(-country)&lt;/code&gt;で直接グループネストを作っても良いかもしれません。&lt;/p&gt;
&lt;p&gt;さて、上記で作成した&lt;strong&gt;nest_by_country&lt;/strong&gt;というオブジェクトを出力すると次の結果が得られます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nest_by_country
## # A tibble: 142 × 2
##        country               data
##         &amp;lt;fctr&amp;gt;             &amp;lt;list&amp;gt;
## 1  Afghanistan &amp;lt;tibble [12 × 5]&amp;gt;
## 2      Albania &amp;lt;tibble [12 × 5]&amp;gt;
## 3      Algeria &amp;lt;tibble [12 × 5]&amp;gt;
## 4       Angola &amp;lt;tibble [12 × 5]&amp;gt;
## 5    Argentina &amp;lt;tibble [12 × 5]&amp;gt;
## 6    Australia &amp;lt;tibble [12 × 5]&amp;gt;
## 7      Austria &amp;lt;tibble [12 × 5]&amp;gt;
## 8      Bahrain &amp;lt;tibble [12 × 5]&amp;gt;
## 9   Bangladesh &amp;lt;tibble [12 × 5]&amp;gt;
## 10     Belgium &amp;lt;tibble [12 × 5]&amp;gt;
## # ... with 132 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;countryというのはグループ化に用いたキーですが、dataというのは何を示しているのでしょう。また、どうしてデータサイズが変わっているのでしょうか。これこそが階層構造のあるデータフレームの特徴となります。&lt;/p&gt;
&lt;p&gt;nest_by_countryオブジェクト自体はデータフレームなので、変数の値を参照することができます。試しにdata変数の第一要素を参照してみましょう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nest_by_country$data[[1]]
## # A tibble: 12 × 5
##    continent  year lifeExp      pop gdpPercap
##       &amp;lt;fctr&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;
## 1       Asia  1952  28.801  8425333  779.4453
## 2       Asia  1957  30.332  9240934  820.8530
## 3       Asia  1962  31.997 10267083  853.1007
## 4       Asia  1967  34.020 11537966  836.1971
## 5       Asia  1972  36.088 13079460  739.9811
## 6       Asia  1977  38.438 14880372  786.1134
## 7       Asia  1982  39.854 12881816  978.0114
## 8       Asia  1987  40.822 13867957  852.3959
## 9       Asia  1992  41.674 16317921  649.3414
## 10      Asia  1997  41.763 22227415  635.3414
## 11      Asia  2002  42.129 25268405  726.7341
## 12      Asia  2007  43.828 31889923  974.5803&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;元のgapminderデータが持っていたデータに近い値が出力されました。この値は実は、&lt;code&gt;nest_by_country$country[1]&lt;/code&gt;のAfghanistanに含まれるデータを抽出したものとなっています。それは&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;の次のコードを実行することで確認できます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nest_by_country$country[1]
## [1] Afghanistan
## 142 Levels: Afghanistan Albania Algeria Angola Argentina ... Zimbabwe

identical(nest_by_country$data[[1]],
          gapminder %&amp;gt;% filter(country == &amp;quot;Afghanistan&amp;quot;) %&amp;gt;% 
  select(-country))
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;つまり階層構造のあるデータフレームとは、データフレームに含まれる任意の変数をキーとし、そのキーに含まれる値を別のオブジェクトとし、キーと紐づいた変数に格納することを示しているのです。&lt;/p&gt;
&lt;p&gt;多くのデータは、1つ以上のキーあるいはカテゴリ変数をもっています。そしてこれらのキーに応じて、キーに含まれる項目の数を集計したり、キーごとに処理を行ったり、統計モデリングを適用したりといったことが頻繁に行われます。これらの出力形式はさまざまですが、キーを基準としている以上、処理結果をキーと紐づけることが可能です。ですが、格納形式が厳密なデータフレームではそれができません。そのため、階層構造のあるデータフレームはリストのようにデータフレームの中にさらにオブジェクトを含めることを可能としています。これにより、元のデータ（キー）と処理結果を簡単に紐付け、再びデータフレームとして操作することができます。&lt;/p&gt;
&lt;p&gt;また上記で、入れ子にされるオブジェクトを別のオブジェクトと書きましたが、これは先のようにデータフレームでなく、リストや統計解析のためのオブジェクトであってもネスト可能であることを示しています。今度は&lt;code&gt;dplyr::do()&lt;/code&gt;を用いて線形回帰を行ってみましょう。&lt;code&gt;dplyr::do()&lt;/code&gt;はグループに対し共通の処理を施すのに適しています。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(do_by_country &amp;lt;- gapminder %&amp;gt;% 
  group_by(country) %&amp;gt;% 
  do(data = lm(lifeExp ~ year, data = .)))
## Source: local data frame [142 x 2]
## Groups: &amp;lt;by row&amp;gt;
## 
## # A tibble: 142 × 2
##        country     data
## *       &amp;lt;fctr&amp;gt;   &amp;lt;list&amp;gt;
## 1  Afghanistan &amp;lt;S3: lm&amp;gt;
## 2      Albania &amp;lt;S3: lm&amp;gt;
## 3      Algeria &amp;lt;S3: lm&amp;gt;
## 4       Angola &amp;lt;S3: lm&amp;gt;
## 5    Argentina &amp;lt;S3: lm&amp;gt;
## 6    Australia &amp;lt;S3: lm&amp;gt;
## 7      Austria &amp;lt;S3: lm&amp;gt;
## 8      Bahrain &amp;lt;S3: lm&amp;gt;
## 9   Bangladesh &amp;lt;S3: lm&amp;gt;
## 10     Belgium &amp;lt;S3: lm&amp;gt;
## # ... with 132 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;countryごとに&lt;code&gt;lm()&lt;/code&gt;を適用した結果が格納されました。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all.equal(
  do_by_country$data[[1]],
  gapminder %&amp;gt;% filter(country == &amp;quot;Afghanistan&amp;quot;) %&amp;gt;% 
  select(-country) %&amp;gt;% 
  lm(lifeExp ~ year, data = .)
)
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;入れ子構造を解除するにはどうするのでしょうか。ご心配なく。&lt;strong&gt;&lt;code&gt;{tidyr}&lt;/code&gt;&lt;/strong&gt;には&lt;code&gt;nest()&lt;/code&gt;と対をなす&lt;code&gt;unnest()&lt;/code&gt;という関数が用意されています。しかしそれには入れ子となっているオブジェクトがデータフレームである必要があります。なので先の線形回帰の結果を&lt;strong&gt;&lt;code&gt;{broom}&lt;/code&gt;&lt;/strong&gt;パッケージの&lt;code&gt;tidy()&lt;/code&gt;によりデータフレームとして扱えるようにしてから入れ子構造を解除します。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{broom}&lt;/code&gt;&lt;/strong&gt;パッケージは、Rの統計解析の関数の出力結果を扱いやすいデータフレームへと整形してくれる便利なパッケージです。例えば&lt;code&gt;lm()&lt;/code&gt;の結果に対し&lt;code&gt;broom::tidy()&lt;/code&gt;を実行すると切片や係数、p値などをデータフレーム形式で取得できます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;do_by_country &amp;lt;- gapminder %&amp;gt;% 
  group_by(country) %&amp;gt;% 
  do(data = lm(lifeExp ~ year, data = .) %&amp;gt;% broom::tidy()) %&amp;gt;% 
  tidyr::unnest()

do_by_country %&amp;gt;% colnames()
## [1] &amp;quot;country&amp;quot;   &amp;quot;term&amp;quot;      &amp;quot;estimate&amp;quot;  &amp;quot;std.error&amp;quot; &amp;quot;statistic&amp;quot; &amp;quot;p.value&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;データフレームなので、&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;の関数を使って特定の国の結果のみを取り出すことができます。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;do_by_country %&amp;gt;% filter(country == &amp;quot;Afghanistan&amp;quot;)
## # A tibble: 2 × 6
##       country        term     estimate   std.error statistic
##        &amp;lt;fctr&amp;gt;       &amp;lt;chr&amp;gt;        &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Afghanistan (Intercept) -507.5342716 40.48416195 -12.53661
## 2 Afghanistan        year    0.2753287  0.02045093  13.46289
## # ... with 1 more variables: p.value &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;しかし、全ての入れ子がデータフレームにできるわけではありません。そのような時には&lt;strong&gt;&lt;code&gt;{purrr}&lt;/code&gt;&lt;/strong&gt;による関数型プログラミングによるデータ操作が効果を発揮します。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;by_country &amp;lt;- nest_by_country %&amp;gt;% 
  dplyr::mutate(model = purrr::map(data, ~ lm(lifeExp ~ year, data = .)))

by_country %&amp;gt;% unnest(model %&amp;gt;% purrr::map(broom::tidy))
## # A tibble: 284 × 6
##        country        term      estimate    std.error  statistic
##         &amp;lt;fctr&amp;gt;       &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;        &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1  Afghanistan (Intercept)  -507.5342716 40.484161954 -12.536613
## 2  Afghanistan        year     0.2753287  0.020450934  13.462890
## 3      Albania (Intercept)  -594.0725110 65.655359062  -9.048348
## 4      Albania        year     0.3346832  0.033166387  10.091036
## 5      Algeria (Intercept) -1067.8590396 43.802200843 -24.379118
## 6      Algeria        year     0.5692797  0.022127070  25.727749
## 7       Angola (Intercept)  -376.5047531 46.583370599  -8.082385
## 8       Angola        year     0.2093399  0.023532003   8.895964
## 9    Argentina (Intercept)  -389.6063445  9.677729641 -40.258031
## 10   Argentina        year     0.2317084  0.004888791  47.395847
## # ... with 274 more rows, and 1 more variables: p.value &amp;lt;dbl&amp;gt;
by_country %&amp;gt;% unnest(model %&amp;gt;% purrr::map(broom::augment))
## # A tibble: 1,704 × 10
##        country lifeExp  year  .fitted   .se.fit      .resid       .hat
##         &amp;lt;fctr&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
## 1  Afghanistan  28.801  1952 29.90729 0.6639995 -1.10629487 0.29487179
## 2  Afghanistan  30.332  1957 31.28394 0.5799442 -0.95193823 0.22494172
## 3  Afghanistan  31.997  1962 32.66058 0.5026799 -0.66358159 0.16899767
## 4  Afghanistan  34.020  1967 34.03722 0.4358337 -0.01722494 0.12703963
## 5  Afghanistan  36.088  1972 35.41387 0.3848726  0.67413170 0.09906760
## 6  Afghanistan  38.438  1977 36.79051 0.3566719  1.64748834 0.08508159
## 7  Afghanistan  39.854  1982 38.16716 0.3566719  1.68684499 0.08508159
## 8  Afghanistan  40.822  1987 39.54380 0.3848726  1.27820163 0.09906760
## 9  Afghanistan  41.674  1992 40.92044 0.4358337  0.75355828 0.12703963
## 10 Afghanistan  41.763  1997 42.29709 0.5026799 -0.53408508 0.16899767
## # ... with 1,694 more rows, and 3 more variables: .sigma &amp;lt;dbl&amp;gt;,
## #   .cooksd &amp;lt;dbl&amp;gt;, .std.resid &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あるいは次のように&lt;code&gt;split()&lt;/code&gt;でグループを分割し、各グループに対して&lt;code&gt;lm() %&amp;gt;% broom::tidy()&lt;/code&gt;を適用するのも一つの方法です。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map_by_country &amp;lt;- gapminder %&amp;gt;% 
  split(.$country) %&amp;gt;% 
  purrr::map(., ~ lm(lifeExp ~ year, data = .) %&amp;gt;% broom::tidy())

map_by_country$Afghanistan
##          term     estimate   std.error statistic          p.value
## 1 (Intercept) -507.5342716 40.48416195 -12.53661 0.00000019340553
## 2        year    0.2753287  0.02045093  13.46289 0.00000009835213&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回紹介したパッケージは、データセットを提供した&lt;strong&gt;&lt;code&gt;{gapminder}&lt;/code&gt;&lt;/strong&gt;をのぞいて、&lt;strong&gt;&lt;code&gt;{tidyverse}&lt;/code&gt;&lt;/strong&gt;に含まれているものです。すごい設計思想ですね。俺たちのtidyverseはこれからだ！&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>