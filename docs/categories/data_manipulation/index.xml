<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>suryu.me</title>
    <link>/categories/data_manipulation/index.xml</link>
    <description>Recent content on suryu.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="/categories/data_manipulation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>dplyrのベクトル要素変換用関数3種</title>
      <link>/post/dplyr_recode/</link>
      <pubDate>Wed, 23 Nov 2016 06:30:00 +0000</pubDate>
      
      <guid>/post/dplyr_recode/</guid>
      <description>&lt;!-- BLOGDOWN-BODY-BEFORE

/BLOGDOWN-BODY-BEFORE --&gt;

&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt;パッケージの現行バージョン (0.5.0) ではデータ操作の中で値を変更するための関数がいくつか用意されている。これらの関数の使い道と使い分けについてメモしておく。&lt;/p&gt;
&lt;p&gt;簡単に整理するとこんな感じになる&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;関数&lt;/th&gt;
&lt;th&gt;特徴&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;if_else()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ifelse()&lt;/code&gt;の拡張。欠損値に対する挙動も指定できる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;code&gt;case_when()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ベクトルの各要素に対する挙動を指定。指定しない場合には欠損値として扱われるので注意&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;code&gt;recode()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;ベクトル内の特定の値だけを変更したいときに効果的。変換後の型に注意&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div id=&#34;if_else&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;if_else関数&lt;/h2&gt;
&lt;p&gt;ドキュメントによるとこの関数は、R標準の制御関数の一つである&lt;code&gt;ifelse()&lt;/code&gt;と比べてより厳密 strict なものであるらしい。ここでの strict とはどういうことか。yutannihilation さんがこんな記事を書いてくれたのでこちらを読んでほしい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://notchained.hatenablog.com/entry/2016/11/23/112729&#34;&gt;ifelse()は危険なのでやめてdplyr::if_else()を使いましょう&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;真偽値の判定を実行するコード（xはyよりも大きい、xのクラスはzである、とか）と、真偽それぞれの状況の応答を引数に与えて実行する。またこの関数は、それだけでなくxの値が欠損値である場合についても特定の処理を実行するという特徴をもつ。欠損値に対する挙動は引数&lt;em&gt;missing&lt;/em&gt;によって与える。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(-3:3, NA)
if_else(x &amp;lt; 0, &amp;quot;negative&amp;quot;, &amp;quot;positive&amp;quot;, missing = &amp;quot;missing&amp;quot;)
## [1] &amp;quot;negative&amp;quot; &amp;quot;negative&amp;quot; &amp;quot;negative&amp;quot; &amp;quot;positive&amp;quot; &amp;quot;positive&amp;quot; &amp;quot;positive&amp;quot;
## [7] &amp;quot;positive&amp;quot; &amp;quot;missing&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この関数はもちろん &lt;strong&gt;&lt;code&gt;{dplyr}&lt;/code&gt;&lt;/strong&gt; の&lt;code&gt;mutate()&lt;/code&gt;内で利用できる。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;iris %&amp;gt;% head() %&amp;gt;% 
  mutate(Sepal.Size = if_else(Sepal.Length &amp;gt; 6.0, TRUE, FALSE))
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species Sepal.Size
## 1          5.1         3.5          1.4         0.2  setosa      FALSE
## 2          4.9         3.0          1.4         0.2  setosa      FALSE
## 3          4.7         3.2          1.3         0.2  setosa      FALSE
## 4          4.6         3.1          1.5         0.2  setosa      FALSE
## 5          5.0         3.6          1.4         0.2  setosa      FALSE
## 6          5.4         3.9          1.7         0.4  setosa      FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;if_else()&lt;/code&gt;では真偽値の判定を入れ子にして複数の分岐を作成することもできるが、データの値を修正する場合には、次の&lt;code&gt;case_when()&lt;/code&gt;を用いるのが良い。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;case_when&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;case_when関数&lt;/h2&gt;
&lt;p&gt;変換候補が複数あるとき、&lt;code&gt;if_else()&lt;/code&gt;よりも&lt;code&gt;case_when()&lt;/code&gt;を使うのが効率的だ。&lt;code&gt;case_when()&lt;/code&gt;では関数名の通り、条件分岐によるベクトル内の要素の変更を行う。書き方が特殊なので慣れが必要。引数内で条件式とそれに該当する値の変更値をチルダ記号（&lt;code&gt;~&lt;/code&gt;）で繋いで指定する。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(-3:3, NA)
case_when(
  x &amp;lt; 0 ~ &amp;quot;negative&amp;quot;,
  x &amp;gt; 0 ~ &amp;quot;positive&amp;quot;)
## [1] &amp;quot;negative&amp;quot; &amp;quot;negative&amp;quot; &amp;quot;negative&amp;quot; NA         &amp;quot;positive&amp;quot; &amp;quot;positive&amp;quot;
## [7] &amp;quot;positive&amp;quot; NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上記のように引数に与えた複数の条件に対して値が変更されるが、気をつけないといけないのが要素の各値に対する挙動である。個々の挙動を指定しないと、条件に当てはまらない、つまり真となる条件のない要素については欠損値に置換されてしまう。先の例では元の欠損値に加え、0もNAになっている。&lt;/p&gt;
&lt;p&gt;で、これを&lt;code&gt;mutate()&lt;/code&gt;の中で使うときの注意点。&lt;code&gt;mutate()&lt;/code&gt;の中で関数を利用する場合、変数の参照は「&lt;code&gt;.$&lt;/code&gt;」で行うということを思い出して次のようにする。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.animals &amp;lt;- tibble::frame_data(
  ~team, ~rank,
  &amp;quot;mouse&amp;quot;, 1,
  &amp;quot;cow&amp;quot;, 2,
  &amp;quot;tiger&amp;quot;, 3,
  &amp;quot;rabbit&amp;quot;, 4
)

df.animals %&amp;gt;% 
  mutate(
    rank = case_when(
      .$team == &amp;quot;mouse&amp;quot; ~ 3,
      .$team == &amp;quot;cow&amp;quot; ~ 2,
      .$team == &amp;quot;tiger&amp;quot; ~ 1,
      .$team == &amp;quot;rabbit&amp;quot; ~3
    )
  )
## # A tibble: 4 × 2
##     team  rank
##    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1  mouse     3
## 2    cow     2
## 3  tiger     1
## 4 rabbit     3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;recode&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;recode&lt;/h2&gt;
&lt;p&gt;もう一つの関数、&lt;code&gt;recode()&lt;/code&gt;。これはより細かいというか、個々の値に対して変換をしたいときに便利。これも引数で「対象の値 = 変換後の値」を記述する形式となる。変換するものがなければ省略して良いし、変換後の値だけを引数に与えても良い。その場合には要素の順に変換の対象としていく（この挙動がいまいち掴めない…）。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- c(-3:3, NA)
recode(x, `3` = 6L, `-3` = -8L)
## [1] -8 -2 -1  0  1  2  6 NA

# 1, 2, 3... が対象となる
recode(x, 6L, -8L, 10L)
## [1] -3 -2 -1  0  6 -8 10 NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ベクトル内の要素は同じ型でなければいけないので、次のように整数と実数や数値ベクトルに文字列を混ぜようとすると怒られる。怒られるだけでなく、その他の値は欠損値となってしまう。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# integerとnumericも区別されるので注意
recode(x, `3` = 6)
## [1] NA NA NA NA NA NA  6 NA
recode(x, `3` = &amp;quot;three&amp;quot;)
## [1] NA      NA      NA      NA      NA      NA      &amp;quot;three&amp;quot; NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すべての要素の挙動を指定する必要はないが、指定したもの以外の値について&lt;code&gt;.default&lt;/code&gt;引数を用いて一括で指定できる。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;recode(x, `3` = &amp;quot;three&amp;quot;, .default = &amp;quot;numeric&amp;quot;)
## [1] &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;three&amp;quot;  
## [8] NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同様に欠損値に対しても&lt;code&gt;.missing&lt;/code&gt;引数での置換を行える。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;recode(x, `3` = &amp;quot;three&amp;quot;, .default = &amp;quot;numeric&amp;quot;, .missing = &amp;quot;missing&amp;quot;)
## [1] &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;numeric&amp;quot; &amp;quot;three&amp;quot;  
## [8] &amp;quot;missing&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;私は&lt;code&gt;mutate()&lt;/code&gt;と組み合わせてこういう使い方をしばしば行う。ここでは「&lt;code&gt;.$&lt;/code&gt;」を使わない&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df.animals %&amp;gt;% 
  mutate(所属 = recode(team,
                     mouse  = &amp;quot;子&amp;quot;,
                     cow    = &amp;quot;丑&amp;quot;,
                     tiger  = &amp;quot;寅&amp;quot;,
                     rabbit = &amp;quot;卯&amp;quot;))
## # A tibble: 4 × 3
##     team  rank  所属
##    &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;
## 1  mouse     1    子
## 2    cow     2    丑
## 3  tiger     3    寅
## 4 rabbit     4    卯&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ベクトルをカテゴリデータにする&lt;code&gt;recode_factor()&lt;/code&gt;関数もあるがここでは割愛。&lt;/p&gt;
&lt;/div&gt;



&lt;!-- BLOGDOWN-HEAD






/BLOGDOWN-HEAD --&gt;
</description>
    </item>
    
  </channel>
</rss>